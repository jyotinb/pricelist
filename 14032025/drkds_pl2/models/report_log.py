# -*- coding: utf-8 -*-
###############################################################################
# Module:    drkds_pl2
# File:      report_log.py
# Purpose:   Track product report generation for auditing and reference
###############################################################################

from odoo import models, fields, api, _
from datetime import datetime
import logging

_logger = logging.getLogger(__name__)


class ProductReportLog(models.Model):
    _name = 'drkds_pl2.product_report_log'
    _description = 'Product Report Generation Log'
    _order = 'create_date desc'
    _rec_name = 'name'
    _inherit = ['mail.thread', 'mail.activity.mixin']  # Add chatter support

    name = fields.Char(
        string='Reference', 
        required=True, 
        copy=False, 
        readonly=True, 
        default=lambda self: _('New'),
        tracking=True,
        help="Unique reference number for this report generation"
    )
    
    user_id = fields.Many2one(
        'res.users', 
        string='Generated By', 
        required=True, 
        default=lambda self: self.env.user,
        tracking=True,
        index=True,
        help="User who generated the report"
    )
    
    customer_id = fields.Many2one(
        'res.partner', 
        string='Customer', 
        required=True, 
        domain=[('customer_rank', '>', 0)],
        tracking=True,
        index=True,
        help="Customer for whom the report was generated"
    )
    
    contact_id = fields.Many2one(
        'res.partner', 
        string='Contact',
        domain="[('parent_id', '=', customer_id)]",
        tracking=True,
        help="Specific contact at the customer company, if applicable"
    )
    
    salesman_id = fields.Many2one(
        'res.users', 
        string='Salesman',
        tracking=True,
        index=True,
        help="Salesperson responsible for this customer"
    )
    
    price_level = fields.Selection([
        ('1', 'Price Level 1'),
        ('2', 'Price Level 2'),
        ('3', 'Price Level 3'),
        ('4', 'Price Level 4'),
        ('all', 'All Price Levels'),
    ], 
        string='Price Level', 
        required=True,
        tracking=True,
        help="Price level used in the report"
    )
    
    doc_id = fields.Many2one(
        'mrp.bom.cost.calculator', 
        string='Source Document',
        tracking=True,
        help="Source BOM cost calculator document used for the report"
    )
    
    create_date = fields.Datetime(
        string='Generated On', 
        readonly=True,
        index=True,
        help="Date and time when the report was generated"
    )
    
    company_id = fields.Many2one(
        'res.company', 
        string='Company',
        required=True, 
        default=lambda self: self.env.company,
        help="Company under which this report was generated"
    )
    
    state = fields.Selection([
        ('draft', 'Draft'),
        ('sent', 'Sent'),
        ('archived', 'Archived')
    ], 
        string='Status',
        default='draft',
        tracking=True,
        help="Status of the report"
    )
    
    # Technical fields for report data
    report_data = fields.Text(
        string='Report Data', 
        help="Technical field to store report generation parameters"
    )
    
    total_products = fields.Integer(
        string='Total Products',
        compute='_compute_product_count',
        help="Number of products included in the report"
    )
    
    @api.depends('doc_id')
    def _compute_product_count(self):
        """Compute the number of products included in the report"""
        for record in self:
            if record.doc_id and record.doc_id.is_multi_product:
                record.total_products = len(record.doc_id.product_line_ids.filtered(lambda l: l.state == 'calculated'))
            elif record.doc_id:
                record.total_products = 1
            else:
                record.total_products = 0
    
    @api.model_create_multi
    def create(self, vals_list):
        """Override create to set the sequence reference number"""
        for vals in vals_list:
            if vals.get('name', _('New')) == _('New'):
                vals['name'] = self.env['ir.sequence'].next_by_code('drkds_pl2.product_report_log') or _('New')
                
                # Log the report generation
                _logger.info(
                    "Product report %s created by user ID %s for customer ID %s with price level %s",
                    vals['name'], vals.get('user_id'), vals.get('customer_id'), vals.get('price_level')
                )
                
        records = super(ProductReportLog, self).create(vals_list)
        return records
    
    def name_get(self):
        """Custom name display to include customer and date"""
        result = []
        for record in self:
            date_str = fields.Datetime.from_string(record.create_date).strftime('%Y-%m-%d') if record.create_date else ''
            customer_name = record.customer_id.name or ''
            display_name = f"{record.name} - {customer_name} ({date_str})"
            result.append((record.id, display_name))
        return result
    
    def action_mark_sent(self):
        """Mark the report as sent to customer"""
        self.ensure_one()
        self.write({'state': 'sent'})
        self.message_post(body=_("Report marked as sent to the customer."))
        return True
    
    def action_archive(self):
        """Archive the report"""
        self.ensure_one()
        self.write({'state': 'archived'})
        self.message_post(body=_("Report archived."))
        return True
    
    def action_view_source_document(self):
        """Open the source document"""
        self.ensure_one()
        if not self.doc_id:
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': _('No Source Document'),
                    'message': _('There is no source document linked to this report.'),
                    'sticky': False,
                    'type': 'warning',
                }
            }
            
        return {
            'name': _('Source Document'),
            'type': 'ir.actions.act_window',
            'res_model': 'mrp.bom.cost.calculator',
            'res_id': self.doc_id.id,
            'view_mode': 'form',
            'target': 'current',
        }
    
    def action_regenerate_report(self):
        """Regenerate the report with the same parameters"""
        self.ensure_one()
        if not self.doc_id:
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': _('Cannot Regenerate'),
                    'message': _('Source document is missing. Cannot regenerate the report.'),
                    'sticky': False,
                    'type': 'warning',
                }
            }
            
        # Create wizard with pre-filled values
        wizard = self.env['drkds_pl2.product_three_column_wizard'].create({
            'doc_id': self.doc_id.id,
            'customer_id': self.customer_id.id,
            'contact_id': self.contact_id.id,
            'salesman_id': self.salesman_id.id,
            'price_level': self.price_level,
        })
        
        return {
            'name': _('Regenerate Product Report'),
            'type': 'ir.actions.act_window',
            'view_mode': 'form',
            'res_model': 'drkds_pl2.product_three_column_wizard',
            'res_id': wizard.id,
            'target': 'new',
        }
    
    @api.onchange('customer_id')
    def _onchange_customer_id(self):
        """Reset contact when customer changes"""
        self.contact_id = False
        
        # Try to find default salesman for this customer
        if self.customer_id and self.customer_id.user_id:
            self.salesman_id = self.customer_id.user_id.id